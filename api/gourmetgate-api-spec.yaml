openapi: 3.1.0
info:
  title: GourmetGate
  description: API specification for the GourmetGate project
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: development environment
  - url: 'https://gouga.com'
    description: production environment
paths:
  /articles:
    get:
      summary: Returns a list of all available articles
      tags:
        - Articles
      parameters:
        - in: query
          name: available
          schema:
            type: boolean
          example: 'true'
          description: 'When set to true, only available articles are returned. When set to false, only unavailable articles are returned. When unspecified, all articles are returned. '
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArticlesResponse"
    post:
      summary: Create a new article
      tags:
        - Articles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        200:
          description: OK - note that article_id property will get replaced when creating new article
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
  /articles/{articleId}:
    get:
      summary: Get article by ID
      tags:
        - Articles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
    put:
      summary: Update article by ID
      tags:
        - Articles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
    delete:
      summary: Delete an article by ID
      tags:
        - Articles
      responses:
        200:
          description: OK

  /categories:
    get:
      summary: Returns a list of all categories
      tags:
        - Categories
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: OK - note that category_id property will get replaced when creating new category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
  /categories/{categoryId}:
    get:
      summary: Get category by ID
      tags:
        - Categories
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
    put:
      summary: Update category by ID
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
    delete:
      summary: Delete a category by ID
      tags:
        - Categories
      responses:
        200:
          description: OK


components:
  schemas:
    Article:
      type: object
      properties:
        article_id:
          type: string
          description: 'Unique identifier of the article'
          format: UUID
          example: '86cb99de-cb0b-450f-b239-526b3efc9bda'
        name:
          type: string
          description: 'Name of the article'
          example: 'HotDog'
        category_id:
          type: string
          description: 'ID of the category, the article belongs to'
          format: UUID
          example: 'bed363fa-287b-43e9-9ee2-d676ff7bd774'
        price:
          type: string
          description: 'Selling price of the article in CHF'
          example: '5.00'
        vat_id:
          type: string
          description: ID of the vat percentage
          example: '2432f1f9-de7e-4f00-986d-db3ec47cdaeb'
        cost:
          type: string
          description: 'Purchase cost of the article (optional)'
          example: '3.50'
        available:
          type: boolean
          description: 'Indicates, if the article is available for purchase'
          example: 'true'
    ArticlesResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: "#/components/schemas/Article"
    Category:
      type: object
      properties:
        category_id:
          type: string
          description: 'Unique identifier of the category'
          format: UUID
          example: 'fb6259f1-106c-40f5-898b-d3c64216a732'
        name:
          type: string
          description: 'Name of the category'
          example: '2bf53e31-08ea-4687-80a2-eb73b0cef925'
    CategoryResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"


tags:
  - name: Articles
    description: Purchasable articles
    externalDocs:
      url: 'https://github.com/gourmetgate/docdump/blob/main/database/database-model.md#article'
  - name: Categories
    description: A category of articles to enable logical grouping
    externalDocs:
      url: 'https://github.com/gourmetgate/docdump/blob/main/database/database-model.md#category'